#nullable enable
const Microsoft.Build.Utilities.ProjectCreation.PackageDependency.DefaultPrivateAssets = "Build,ContentFiles,Analyzers" -> string!
const Microsoft.Build.Utilities.ProjectCreation.ProjectCreatorConstants.DefaultTargetName = "Build" -> string!
const Microsoft.Build.Utilities.ProjectCreation.ProjectCreatorConstants.SdkCsprojDefaultSdk = "Microsoft.NET.Sdk" -> string!
const Microsoft.Build.Utilities.ProjectCreation.ProjectCreatorConstants.SdkCsprojDefaultTargetFramework = "netstandard2.0" -> string!
Microsoft.Build.Utilities.ProjectCreation.BuildEngine
Microsoft.Build.Utilities.ProjectCreation.BuildEngine.BuildProjectFile(string! projectFileName, string![]! targetNames, System.Collections.IDictionary! globalProperties, System.Collections.IDictionary! targetOutputs) -> bool
Microsoft.Build.Utilities.ProjectCreation.BuildEngine.ColumnNumberOfTaskNode.get -> int
Microsoft.Build.Utilities.ProjectCreation.BuildEngine.ContinueOnError.get -> bool
Microsoft.Build.Utilities.ProjectCreation.BuildEngine.LineNumberOfTaskNode.get -> int
Microsoft.Build.Utilities.ProjectCreation.BuildEngine.LogCustomEvent(Microsoft.Build.Framework.CustomBuildEventArgs! e) -> void
Microsoft.Build.Utilities.ProjectCreation.BuildEngine.LogErrorEvent(Microsoft.Build.Framework.BuildErrorEventArgs! e) -> void
Microsoft.Build.Utilities.ProjectCreation.BuildEngine.LogMessageEvent(Microsoft.Build.Framework.BuildMessageEventArgs! e) -> void
Microsoft.Build.Utilities.ProjectCreation.BuildEngine.LogWarningEvent(Microsoft.Build.Framework.BuildWarningEventArgs! e) -> void
Microsoft.Build.Utilities.ProjectCreation.BuildEngine.ProjectFileOfTaskNode.get -> string?
Microsoft.Build.Utilities.ProjectCreation.BuildEventArgsCollection
Microsoft.Build.Utilities.ProjectCreation.BuildEventArgsCollection.Add(Microsoft.Build.Framework.BuildEventArgs! buildEventArgs) -> void
Microsoft.Build.Utilities.ProjectCreation.BuildEventArgsCollection.AllEvents.get -> System.Collections.Generic.IReadOnlyCollection<Microsoft.Build.Framework.BuildEventArgs!>!
Microsoft.Build.Utilities.ProjectCreation.BuildEventArgsCollection.BuildEventArgsCollection() -> void
Microsoft.Build.Utilities.ProjectCreation.BuildEventArgsCollection.ErrorEvents.get -> System.Collections.Generic.IReadOnlyCollection<Microsoft.Build.Framework.BuildErrorEventArgs!>!
Microsoft.Build.Utilities.ProjectCreation.BuildEventArgsCollection.Errors.get -> System.Collections.Generic.IReadOnlyCollection<string!>!
Microsoft.Build.Utilities.ProjectCreation.BuildEventArgsCollection.GetConsoleLog(Microsoft.Build.Framework.LoggerVerbosity verbosity = Microsoft.Build.Framework.LoggerVerbosity.Normal) -> string!
Microsoft.Build.Utilities.ProjectCreation.BuildEventArgsCollection.MessageEvents.get -> Microsoft.Build.Utilities.ProjectCreation.BuildMessageEventArgsCollection!
Microsoft.Build.Utilities.ProjectCreation.BuildEventArgsCollection.Messages.get -> Microsoft.Build.Utilities.ProjectCreation.BuildMessageCollection!
Microsoft.Build.Utilities.ProjectCreation.BuildEventArgsCollection.WarningEvents.get -> System.Collections.Generic.IReadOnlyCollection<Microsoft.Build.Framework.BuildWarningEventArgs!>!
Microsoft.Build.Utilities.ProjectCreation.BuildEventArgsCollection.Warnings.get -> System.Collections.Generic.IReadOnlyCollection<string!>!
Microsoft.Build.Utilities.ProjectCreation.BuildMessageCollection
Microsoft.Build.Utilities.ProjectCreation.BuildMessageCollection.Count.get -> int
Microsoft.Build.Utilities.ProjectCreation.BuildMessageCollection.GetEnumerator() -> System.Collections.Generic.IEnumerator<string!>!
Microsoft.Build.Utilities.ProjectCreation.BuildMessageCollection.High.get -> System.Collections.Generic.IReadOnlyCollection<string!>!
Microsoft.Build.Utilities.ProjectCreation.BuildMessageCollection.Low.get -> System.Collections.Generic.IReadOnlyCollection<string!>!
Microsoft.Build.Utilities.ProjectCreation.BuildMessageCollection.Normal.get -> System.Collections.Generic.IReadOnlyCollection<string!>!
Microsoft.Build.Utilities.ProjectCreation.BuildMessageEventArgsCollection
Microsoft.Build.Utilities.ProjectCreation.BuildMessageEventArgsCollection.Count.get -> int
Microsoft.Build.Utilities.ProjectCreation.BuildMessageEventArgsCollection.GetEnumerator() -> System.Collections.Generic.IEnumerator<Microsoft.Build.Framework.BuildMessageEventArgs!>!
Microsoft.Build.Utilities.ProjectCreation.BuildMessageEventArgsCollection.High.get -> System.Collections.Generic.IReadOnlyCollection<Microsoft.Build.Framework.BuildMessageEventArgs!>!
Microsoft.Build.Utilities.ProjectCreation.BuildMessageEventArgsCollection.Low.get -> System.Collections.Generic.IReadOnlyCollection<Microsoft.Build.Framework.BuildMessageEventArgs!>!
Microsoft.Build.Utilities.ProjectCreation.BuildMessageEventArgsCollection.Normal.get -> System.Collections.Generic.IReadOnlyCollection<Microsoft.Build.Framework.BuildMessageEventArgs!>!
Microsoft.Build.Utilities.ProjectCreation.BuildOutput
Microsoft.Build.Utilities.ProjectCreation.BuildOutput.Initialize(Microsoft.Build.Framework.IEventSource! eventSource) -> void
Microsoft.Build.Utilities.ProjectCreation.BuildOutput.IsShutdown.get -> bool
Microsoft.Build.Utilities.ProjectCreation.BuildOutput.Parameters.get -> string?
Microsoft.Build.Utilities.ProjectCreation.BuildOutput.Parameters.set -> void
Microsoft.Build.Utilities.ProjectCreation.BuildOutput.ProjectResults.get -> System.Collections.Generic.IReadOnlyDictionary<string!, bool>!
Microsoft.Build.Utilities.ProjectCreation.BuildOutput.Shutdown() -> void
Microsoft.Build.Utilities.ProjectCreation.BuildOutput.Succeeded.get -> bool?
Microsoft.Build.Utilities.ProjectCreation.BuildOutput.Verbosity.get -> Microsoft.Build.Framework.LoggerVerbosity
Microsoft.Build.Utilities.ProjectCreation.BuildOutput.Verbosity.set -> void
Microsoft.Build.Utilities.ProjectCreation.ExtensionMethods
Microsoft.Build.Utilities.ProjectCreation.MSBuildAssemblyResolver
Microsoft.Build.Utilities.ProjectCreation.MSBuildTestBase
Microsoft.Build.Utilities.ProjectCreation.MSBuildTestBase.MSBuildTestBase() -> void
Microsoft.Build.Utilities.ProjectCreation.Package
Microsoft.Build.Utilities.ProjectCreation.Package.Author.get -> string!
Microsoft.Build.Utilities.ProjectCreation.Package.Compare(Microsoft.Build.Utilities.ProjectCreation.Package? x, Microsoft.Build.Utilities.ProjectCreation.Package? y) -> int
Microsoft.Build.Utilities.ProjectCreation.Package.CompareTo(Microsoft.Build.Utilities.ProjectCreation.Package? other) -> int
Microsoft.Build.Utilities.ProjectCreation.Package.Copyright.get -> string?
Microsoft.Build.Utilities.ProjectCreation.Package.Description.get -> string!
Microsoft.Build.Utilities.ProjectCreation.Package.DevelopmentDependency.get -> bool
Microsoft.Build.Utilities.ProjectCreation.Package.Directory.get -> string?
Microsoft.Build.Utilities.ProjectCreation.Package.Equals(Microsoft.Build.Utilities.ProjectCreation.Package? x, Microsoft.Build.Utilities.ProjectCreation.Package? y) -> bool
Microsoft.Build.Utilities.ProjectCreation.Package.FileName.get -> string!
Microsoft.Build.Utilities.ProjectCreation.Package.FullPath.get -> string?
Microsoft.Build.Utilities.ProjectCreation.Package.GetHashCode(Microsoft.Build.Utilities.ProjectCreation.Package! obj) -> int
Microsoft.Build.Utilities.ProjectCreation.Package.Icon.get -> string?
Microsoft.Build.Utilities.ProjectCreation.Package.IconUrl.get -> string?
Microsoft.Build.Utilities.ProjectCreation.Package.Id.get -> string!
Microsoft.Build.Utilities.ProjectCreation.Package.Language.get -> string?
Microsoft.Build.Utilities.ProjectCreation.Package.LicenseExpression.get -> string?
Microsoft.Build.Utilities.ProjectCreation.Package.LicenseUrl.get -> string?
Microsoft.Build.Utilities.ProjectCreation.Package.LicenseVersion.get -> string?
Microsoft.Build.Utilities.ProjectCreation.Package.Owners.get -> string?
Microsoft.Build.Utilities.ProjectCreation.Package.PackageTypes.get -> System.Collections.Generic.IReadOnlyCollection<string!>?
Microsoft.Build.Utilities.ProjectCreation.Package.ProjectUrl.get -> string?
Microsoft.Build.Utilities.ProjectCreation.Package.ReleaseNotes.get -> string?
Microsoft.Build.Utilities.ProjectCreation.Package.RepositoryBranch.get -> string?
Microsoft.Build.Utilities.ProjectCreation.Package.RepositoryCommit.get -> string?
Microsoft.Build.Utilities.ProjectCreation.Package.RepositoryType.get -> string?
Microsoft.Build.Utilities.ProjectCreation.Package.RepositoryUrl.get -> string?
Microsoft.Build.Utilities.ProjectCreation.Package.RequireLicenseAcceptance.get -> bool
Microsoft.Build.Utilities.ProjectCreation.Package.Serviceable.get -> bool
Microsoft.Build.Utilities.ProjectCreation.Package.Summary.get -> string?
Microsoft.Build.Utilities.ProjectCreation.Package.Tags.get -> string?
Microsoft.Build.Utilities.ProjectCreation.Package.Title.get -> string?
Microsoft.Build.Utilities.ProjectCreation.Package.Version.get -> string!
Microsoft.Build.Utilities.ProjectCreation.PackageContentFileEntry
Microsoft.Build.Utilities.ProjectCreation.PackageContentFileEntry.BuildAction.get -> string?
Microsoft.Build.Utilities.ProjectCreation.PackageContentFileEntry.BuildAction.set -> void
Microsoft.Build.Utilities.ProjectCreation.PackageContentFileEntry.CopyToOutput.get -> bool?
Microsoft.Build.Utilities.ProjectCreation.PackageContentFileEntry.CopyToOutput.set -> void
Microsoft.Build.Utilities.ProjectCreation.PackageContentFileEntry.Exclude.get -> string?
Microsoft.Build.Utilities.ProjectCreation.PackageContentFileEntry.Exclude.set -> void
Microsoft.Build.Utilities.ProjectCreation.PackageContentFileEntry.Flatten.get -> bool?
Microsoft.Build.Utilities.ProjectCreation.PackageContentFileEntry.Flatten.set -> void
Microsoft.Build.Utilities.ProjectCreation.PackageContentFileEntry.Include.get -> string?
Microsoft.Build.Utilities.ProjectCreation.PackageContentFileEntry.Include.set -> void
Microsoft.Build.Utilities.ProjectCreation.PackageDependency
Microsoft.Build.Utilities.ProjectCreation.PackageDependency.Equals(Microsoft.Build.Utilities.ProjectCreation.PackageDependency? other) -> bool
Microsoft.Build.Utilities.ProjectCreation.PackageDependency.Equals(Microsoft.Build.Utilities.ProjectCreation.PackageDependency? x, Microsoft.Build.Utilities.ProjectCreation.PackageDependency? y) -> bool
Microsoft.Build.Utilities.ProjectCreation.PackageDependency.ExcludeAssets.get -> string!
Microsoft.Build.Utilities.ProjectCreation.PackageDependency.GetHashCode(Microsoft.Build.Utilities.ProjectCreation.PackageDependency! obj) -> int
Microsoft.Build.Utilities.ProjectCreation.PackageDependency.Id.get -> string?
Microsoft.Build.Utilities.ProjectCreation.PackageDependency.Version.get -> string?
Microsoft.Build.Utilities.ProjectCreation.PackageFeed
Microsoft.Build.Utilities.ProjectCreation.PackageFeed.BuildMultiTargetingProps(Microsoft.Build.Evaluation.NewProjectFileOptions projectFileOptions = (Microsoft.Build.Evaluation.NewProjectFileOptions)-1) -> Microsoft.Build.Utilities.ProjectCreation.PackageFeed!
Microsoft.Build.Utilities.ProjectCreation.PackageFeed.BuildMultiTargetingProps(System.Action<Microsoft.Build.Utilities.ProjectCreation.ProjectCreator!>? creator, Microsoft.Build.Evaluation.NewProjectFileOptions projectFileOptions = (Microsoft.Build.Evaluation.NewProjectFileOptions)-1) -> Microsoft.Build.Utilities.ProjectCreation.PackageFeed!
Microsoft.Build.Utilities.ProjectCreation.PackageFeed.BuildMultiTargetingTargets(Microsoft.Build.Evaluation.NewProjectFileOptions projectFileOptions = (Microsoft.Build.Evaluation.NewProjectFileOptions)-1) -> Microsoft.Build.Utilities.ProjectCreation.PackageFeed!
Microsoft.Build.Utilities.ProjectCreation.PackageFeed.BuildMultiTargetingTargets(System.Action<Microsoft.Build.Utilities.ProjectCreation.ProjectCreator!>? creator, Microsoft.Build.Evaluation.NewProjectFileOptions projectFileOptions = (Microsoft.Build.Evaluation.NewProjectFileOptions)-1) -> Microsoft.Build.Utilities.ProjectCreation.PackageFeed!
Microsoft.Build.Utilities.ProjectCreation.PackageFeed.BuildProps(Microsoft.Build.Evaluation.NewProjectFileOptions projectFileOptions = (Microsoft.Build.Evaluation.NewProjectFileOptions)-1) -> Microsoft.Build.Utilities.ProjectCreation.PackageFeed!
Microsoft.Build.Utilities.ProjectCreation.PackageFeed.BuildProps(System.Action<Microsoft.Build.Utilities.ProjectCreation.ProjectCreator!>? creator, Microsoft.Build.Evaluation.NewProjectFileOptions projectFileOptions = (Microsoft.Build.Evaluation.NewProjectFileOptions)-1) -> Microsoft.Build.Utilities.ProjectCreation.PackageFeed!
Microsoft.Build.Utilities.ProjectCreation.PackageFeed.BuildTargets(Microsoft.Build.Evaluation.NewProjectFileOptions projectFileOptions = (Microsoft.Build.Evaluation.NewProjectFileOptions)-1) -> Microsoft.Build.Utilities.ProjectCreation.PackageFeed!
Microsoft.Build.Utilities.ProjectCreation.PackageFeed.BuildTargets(System.Action<Microsoft.Build.Utilities.ProjectCreation.ProjectCreator!>? creator, Microsoft.Build.Evaluation.NewProjectFileOptions projectFileOptions = (Microsoft.Build.Evaluation.NewProjectFileOptions)-1) -> Microsoft.Build.Utilities.ProjectCreation.PackageFeed!
Microsoft.Build.Utilities.ProjectCreation.PackageFeed.BuildTransitiveProps(Microsoft.Build.Evaluation.NewProjectFileOptions projectFileOptions = (Microsoft.Build.Evaluation.NewProjectFileOptions)-1) -> Microsoft.Build.Utilities.ProjectCreation.PackageFeed!
Microsoft.Build.Utilities.ProjectCreation.PackageFeed.BuildTransitiveProps(System.Action<Microsoft.Build.Utilities.ProjectCreation.ProjectCreator!>? creator, Microsoft.Build.Evaluation.NewProjectFileOptions projectFileOptions = (Microsoft.Build.Evaluation.NewProjectFileOptions)-1) -> Microsoft.Build.Utilities.ProjectCreation.PackageFeed!
Microsoft.Build.Utilities.ProjectCreation.PackageFeed.BuildTransitiveTargets(Microsoft.Build.Evaluation.NewProjectFileOptions projectFileOptions = (Microsoft.Build.Evaluation.NewProjectFileOptions)-1) -> Microsoft.Build.Utilities.ProjectCreation.PackageFeed!
Microsoft.Build.Utilities.ProjectCreation.PackageFeed.BuildTransitiveTargets(System.Action<Microsoft.Build.Utilities.ProjectCreation.ProjectCreator!>? creator, Microsoft.Build.Evaluation.NewProjectFileOptions projectFileOptions = (Microsoft.Build.Evaluation.NewProjectFileOptions)-1) -> Microsoft.Build.Utilities.ProjectCreation.PackageFeed!
Microsoft.Build.Utilities.ProjectCreation.PackageFeed.ContentFileText(string! relativePath, string! contents, string! targetFramework, bool copyToOutput = true) -> Microsoft.Build.Utilities.ProjectCreation.PackageFeed!
Microsoft.Build.Utilities.ProjectCreation.PackageFeed.ContentFileText(string! relativePath, string! contents, string! targetFramework, string! buildAction, bool copyToOutput = false, bool flatten = false, string! language = "any") -> Microsoft.Build.Utilities.ProjectCreation.PackageFeed!
Microsoft.Build.Utilities.ProjectCreation.PackageFeed.Dependency(string! targetFramework, string! id, string! version, string! include = "All", string! exclude = "None") -> Microsoft.Build.Utilities.ProjectCreation.PackageFeed!
Microsoft.Build.Utilities.ProjectCreation.PackageFeed.Dispose() -> void
Microsoft.Build.Utilities.ProjectCreation.PackageFeed.FileCustom(string! relativePath, System.IO.FileInfo! sourceFileInfo) -> Microsoft.Build.Utilities.ProjectCreation.PackageFeed!
Microsoft.Build.Utilities.ProjectCreation.PackageFeed.FileText(string! relativePath, string! contents) -> Microsoft.Build.Utilities.ProjectCreation.PackageFeed!
Microsoft.Build.Utilities.ProjectCreation.PackageFeed.ForEach<T>(System.Collections.Generic.IEnumerable<T>! source, System.Action<T, Microsoft.Build.Utilities.ProjectCreation.PackageFeed!>! action) -> Microsoft.Build.Utilities.ProjectCreation.PackageFeed!
Microsoft.Build.Utilities.ProjectCreation.PackageFeed.Library(string! targetFramework, string? filename = null, string? namespace = null, string? className = null, string! assemblyVersion = "1.0.0.0") -> Microsoft.Build.Utilities.ProjectCreation.PackageFeed!
Microsoft.Build.Utilities.ProjectCreation.PackageFeed.Package(string! id, string! version, out Microsoft.Build.Utilities.ProjectCreation.Package! package, string! author = "Author", string! description = "Description", bool developmentDependency = false) -> Microsoft.Build.Utilities.ProjectCreation.PackageFeed!
Microsoft.Build.Utilities.ProjectCreation.PackageFeed.Package(string! id, string! version, string! author = "Author", string! description = "Description") -> Microsoft.Build.Utilities.ProjectCreation.PackageFeed!
Microsoft.Build.Utilities.ProjectCreation.PackageFeed.Packages.get -> System.Collections.Generic.IReadOnlyCollection<Microsoft.Build.Utilities.ProjectCreation.Package!>!
Microsoft.Build.Utilities.ProjectCreation.PackageFeed.ReferenceAssembly(string! targetFramework, string? filename = null, string? namespace = null, string? className = null, string! assemblyVersion = "1.0.0.0") -> Microsoft.Build.Utilities.ProjectCreation.PackageFeed!
Microsoft.Build.Utilities.ProjectCreation.PackageFeed.Save() -> Microsoft.Build.Utilities.ProjectCreation.PackageFeed!
Microsoft.Build.Utilities.ProjectCreation.PackageFeedTemplates
Microsoft.Build.Utilities.ProjectCreation.PackageFeedTemplates.PackageFeedTemplates() -> void
Microsoft.Build.Utilities.ProjectCreation.PackageFeedTemplates.SinglePackage(string! rootPath, out Microsoft.Build.Utilities.ProjectCreation.Package! package, string! id = "SomePackage", string! version = "1.0.0", string! targetFramework = "netstandard2.0") -> Microsoft.Build.Utilities.ProjectCreation.PackageFeed!
Microsoft.Build.Utilities.ProjectCreation.PackageFeedTemplates.SinglePackage(System.IO.DirectoryInfo! rootPath, out Microsoft.Build.Utilities.ProjectCreation.Package! package, string! id = "SomePackage", string! version = "1.0.0", string! targetFramework = "netstandard2.0") -> Microsoft.Build.Utilities.ProjectCreation.PackageFeed!
Microsoft.Build.Utilities.ProjectCreation.PackageRepository
Microsoft.Build.Utilities.ProjectCreation.PackageRepository.BuildMultiTargetingProps(Microsoft.Build.Evaluation.NewProjectFileOptions projectFileOptions = (Microsoft.Build.Evaluation.NewProjectFileOptions)-1) -> Microsoft.Build.Utilities.ProjectCreation.PackageRepository!
Microsoft.Build.Utilities.ProjectCreation.PackageRepository.BuildMultiTargetingProps(out Microsoft.Build.Utilities.ProjectCreation.ProjectCreator! project, Microsoft.Build.Evaluation.NewProjectFileOptions projectFileOptions = (Microsoft.Build.Evaluation.NewProjectFileOptions)-1) -> Microsoft.Build.Utilities.ProjectCreation.PackageRepository!
Microsoft.Build.Utilities.ProjectCreation.PackageRepository.BuildMultiTargetingProps(System.Action<Microsoft.Build.Utilities.ProjectCreation.ProjectCreator!>? creator, Microsoft.Build.Evaluation.NewProjectFileOptions projectFileOptions = (Microsoft.Build.Evaluation.NewProjectFileOptions)-1) -> Microsoft.Build.Utilities.ProjectCreation.PackageRepository!
Microsoft.Build.Utilities.ProjectCreation.PackageRepository.BuildMultiTargetingProps(System.Action<Microsoft.Build.Utilities.ProjectCreation.ProjectCreator!>? creator, out Microsoft.Build.Utilities.ProjectCreation.ProjectCreator! project, Microsoft.Build.Evaluation.NewProjectFileOptions projectFileOptions = (Microsoft.Build.Evaluation.NewProjectFileOptions)-1) -> Microsoft.Build.Utilities.ProjectCreation.PackageRepository!
Microsoft.Build.Utilities.ProjectCreation.PackageRepository.BuildMultiTargetingTargets(Microsoft.Build.Evaluation.NewProjectFileOptions projectFileOptions = (Microsoft.Build.Evaluation.NewProjectFileOptions)-1) -> Microsoft.Build.Utilities.ProjectCreation.PackageRepository!
Microsoft.Build.Utilities.ProjectCreation.PackageRepository.BuildMultiTargetingTargets(out Microsoft.Build.Utilities.ProjectCreation.ProjectCreator! project, Microsoft.Build.Evaluation.NewProjectFileOptions projectFileOptions = (Microsoft.Build.Evaluation.NewProjectFileOptions)-1) -> Microsoft.Build.Utilities.ProjectCreation.PackageRepository!
Microsoft.Build.Utilities.ProjectCreation.PackageRepository.BuildMultiTargetingTargets(System.Action<Microsoft.Build.Utilities.ProjectCreation.ProjectCreator!>! creator, Microsoft.Build.Evaluation.NewProjectFileOptions projectFileOptions = (Microsoft.Build.Evaluation.NewProjectFileOptions)-1) -> Microsoft.Build.Utilities.ProjectCreation.PackageRepository!
Microsoft.Build.Utilities.ProjectCreation.PackageRepository.BuildMultiTargetingTargets(System.Action<Microsoft.Build.Utilities.ProjectCreation.ProjectCreator!>? creator, out Microsoft.Build.Utilities.ProjectCreation.ProjectCreator! project, Microsoft.Build.Evaluation.NewProjectFileOptions projectFileOptions = (Microsoft.Build.Evaluation.NewProjectFileOptions)-1) -> Microsoft.Build.Utilities.ProjectCreation.PackageRepository!
Microsoft.Build.Utilities.ProjectCreation.PackageRepository.BuildProps(Microsoft.Build.Evaluation.NewProjectFileOptions projectFileOptions = (Microsoft.Build.Evaluation.NewProjectFileOptions)-1) -> Microsoft.Build.Utilities.ProjectCreation.PackageRepository!
Microsoft.Build.Utilities.ProjectCreation.PackageRepository.BuildProps(out Microsoft.Build.Utilities.ProjectCreation.ProjectCreator! project, Microsoft.Build.Evaluation.NewProjectFileOptions projectFileOptions = (Microsoft.Build.Evaluation.NewProjectFileOptions)-1) -> Microsoft.Build.Utilities.ProjectCreation.PackageRepository!
Microsoft.Build.Utilities.ProjectCreation.PackageRepository.BuildProps(System.Action<Microsoft.Build.Utilities.ProjectCreation.ProjectCreator!>! creator, Microsoft.Build.Evaluation.NewProjectFileOptions projectFileOptions = (Microsoft.Build.Evaluation.NewProjectFileOptions)-1) -> Microsoft.Build.Utilities.ProjectCreation.PackageRepository!
Microsoft.Build.Utilities.ProjectCreation.PackageRepository.BuildProps(System.Action<Microsoft.Build.Utilities.ProjectCreation.ProjectCreator!>? creator, out Microsoft.Build.Utilities.ProjectCreation.ProjectCreator! project, Microsoft.Build.Evaluation.NewProjectFileOptions projectFileOptions = (Microsoft.Build.Evaluation.NewProjectFileOptions)-1) -> Microsoft.Build.Utilities.ProjectCreation.PackageRepository!
Microsoft.Build.Utilities.ProjectCreation.PackageRepository.BuildTargets(Microsoft.Build.Evaluation.NewProjectFileOptions projectFileOptions = (Microsoft.Build.Evaluation.NewProjectFileOptions)-1) -> Microsoft.Build.Utilities.ProjectCreation.PackageRepository!
Microsoft.Build.Utilities.ProjectCreation.PackageRepository.BuildTargets(out Microsoft.Build.Utilities.ProjectCreation.ProjectCreator! project, Microsoft.Build.Evaluation.NewProjectFileOptions projectFileOptions = (Microsoft.Build.Evaluation.NewProjectFileOptions)-1) -> Microsoft.Build.Utilities.ProjectCreation.PackageRepository!
Microsoft.Build.Utilities.ProjectCreation.PackageRepository.BuildTargets(System.Action<Microsoft.Build.Utilities.ProjectCreation.ProjectCreator!>! creator, Microsoft.Build.Evaluation.NewProjectFileOptions projectFileOptions = (Microsoft.Build.Evaluation.NewProjectFileOptions)-1) -> Microsoft.Build.Utilities.ProjectCreation.PackageRepository!
Microsoft.Build.Utilities.ProjectCreation.PackageRepository.BuildTargets(System.Action<Microsoft.Build.Utilities.ProjectCreation.ProjectCreator!>? creator, out Microsoft.Build.Utilities.ProjectCreation.ProjectCreator! project, Microsoft.Build.Evaluation.NewProjectFileOptions projectFileOptions = (Microsoft.Build.Evaluation.NewProjectFileOptions)-1) -> Microsoft.Build.Utilities.ProjectCreation.PackageRepository!
Microsoft.Build.Utilities.ProjectCreation.PackageRepository.BuildTransitiveProps(Microsoft.Build.Evaluation.NewProjectFileOptions projectFileOptions = (Microsoft.Build.Evaluation.NewProjectFileOptions)-1) -> Microsoft.Build.Utilities.ProjectCreation.PackageRepository!
Microsoft.Build.Utilities.ProjectCreation.PackageRepository.BuildTransitiveProps(out Microsoft.Build.Utilities.ProjectCreation.ProjectCreator! project, Microsoft.Build.Evaluation.NewProjectFileOptions projectFileOptions = (Microsoft.Build.Evaluation.NewProjectFileOptions)-1) -> Microsoft.Build.Utilities.ProjectCreation.PackageRepository!
Microsoft.Build.Utilities.ProjectCreation.PackageRepository.BuildTransitiveProps(System.Action<Microsoft.Build.Utilities.ProjectCreation.ProjectCreator!>! creator, Microsoft.Build.Evaluation.NewProjectFileOptions projectFileOptions = (Microsoft.Build.Evaluation.NewProjectFileOptions)-1) -> Microsoft.Build.Utilities.ProjectCreation.PackageRepository!
Microsoft.Build.Utilities.ProjectCreation.PackageRepository.BuildTransitiveProps(System.Action<Microsoft.Build.Utilities.ProjectCreation.ProjectCreator!>? creator, out Microsoft.Build.Utilities.ProjectCreation.ProjectCreator! project, Microsoft.Build.Evaluation.NewProjectFileOptions projectFileOptions = (Microsoft.Build.Evaluation.NewProjectFileOptions)-1) -> Microsoft.Build.Utilities.ProjectCreation.PackageRepository!
Microsoft.Build.Utilities.ProjectCreation.PackageRepository.BuildTransitiveTargets(Microsoft.Build.Evaluation.NewProjectFileOptions projectFileOptions = (Microsoft.Build.Evaluation.NewProjectFileOptions)-1) -> Microsoft.Build.Utilities.ProjectCreation.PackageRepository!
Microsoft.Build.Utilities.ProjectCreation.PackageRepository.BuildTransitiveTargets(out Microsoft.Build.Utilities.ProjectCreation.ProjectCreator! project, Microsoft.Build.Evaluation.NewProjectFileOptions projectFileOptions = (Microsoft.Build.Evaluation.NewProjectFileOptions)-1) -> Microsoft.Build.Utilities.ProjectCreation.PackageRepository!
Microsoft.Build.Utilities.ProjectCreation.PackageRepository.BuildTransitiveTargets(System.Action<Microsoft.Build.Utilities.ProjectCreation.ProjectCreator!>! creator, Microsoft.Build.Evaluation.NewProjectFileOptions projectFileOptions = (Microsoft.Build.Evaluation.NewProjectFileOptions)-1) -> Microsoft.Build.Utilities.ProjectCreation.PackageRepository!
Microsoft.Build.Utilities.ProjectCreation.PackageRepository.BuildTransitiveTargets(System.Action<Microsoft.Build.Utilities.ProjectCreation.ProjectCreator!>? creator, out Microsoft.Build.Utilities.ProjectCreation.ProjectCreator! project, Microsoft.Build.Evaluation.NewProjectFileOptions projectFileOptions = (Microsoft.Build.Evaluation.NewProjectFileOptions)-1) -> Microsoft.Build.Utilities.ProjectCreation.PackageRepository!
Microsoft.Build.Utilities.ProjectCreation.PackageRepository.Dependency(Microsoft.Build.Utilities.ProjectCreation.Package! package, string! targetFramework, string? includeAssets = "All", string? excludeAssets = "None") -> Microsoft.Build.Utilities.ProjectCreation.PackageRepository!
Microsoft.Build.Utilities.ProjectCreation.PackageRepository.Dependency(string! id, string! version, string! targetFramework, string? includeAssets = "All", string? excludeAssets = "None") -> Microsoft.Build.Utilities.ProjectCreation.PackageRepository!
Microsoft.Build.Utilities.ProjectCreation.PackageRepository.Dispose() -> void
Microsoft.Build.Utilities.ProjectCreation.PackageRepository.FileCustom(string! relativePath, System.IO.FileInfo! sourceFileInfo) -> Microsoft.Build.Utilities.ProjectCreation.PackageRepository!
Microsoft.Build.Utilities.ProjectCreation.PackageRepository.FileText(string! relativePath, string! contents) -> Microsoft.Build.Utilities.ProjectCreation.PackageRepository!
Microsoft.Build.Utilities.ProjectCreation.PackageRepository.GetInstallPath(string! packageId, string! version) -> string!
Microsoft.Build.Utilities.ProjectCreation.PackageRepository.GetManifestFilePath(string! packageId, string! version) -> string!
Microsoft.Build.Utilities.ProjectCreation.PackageRepository.GlobalPackagesFolder.get -> string!
Microsoft.Build.Utilities.ProjectCreation.PackageRepository.Library(string! targetFramework, string? filename = null, string? namespace = null, string? className = null, string! assemblyVersion = "1.0.0.0") -> Microsoft.Build.Utilities.ProjectCreation.PackageRepository!
Microsoft.Build.Utilities.ProjectCreation.PackageRepository.NuGetConfigPath.get -> string!
Microsoft.Build.Utilities.ProjectCreation.PackageRepository.Package(string! id, string! version, out Microsoft.Build.Utilities.ProjectCreation.Package! package, string? authors = "UserA", string? description = "Description", string? copyright = null, bool developmentDependency = false, string? icon = null, string? iconUrl = null, string? language = null, string? licenseUrl = null, string? licenseExpression = null, string? licenseVersion = null, string? owners = null, System.Collections.Generic.IEnumerable<string!>? packageTypes = null, string? projectUrl = null, string? releaseNotes = null, string? repositoryType = null, string? repositoryUrl = null, string? repositoryBranch = null, string? repositoryCommit = null, bool requireLicenseAcceptance = false, bool serviceable = false, string? summary = null, string? tags = null, string? title = null) -> Microsoft.Build.Utilities.ProjectCreation.PackageRepository!
Microsoft.Build.Utilities.ProjectCreation.PackageRepository.Package(string! id, string! version, string? authors = null, string? description = null, string? copyright = null, bool developmentDependency = false, string? icon = null, string? iconUrl = null, string? language = null, string? licenseUrl = null, string? licenseExpression = null, string? licenseVersion = null, string? owners = null, System.Collections.Generic.IEnumerable<string!>? packageTypes = null, string? projectUrl = null, string? releaseNotes = null, string? repositoryType = null, string? repositoryUrl = null, string? repositoryBranch = null, string? repositoryCommit = null, bool requireLicenseAcceptance = false, bool serviceable = false, string? summary = null, string? tags = null, string? title = null) -> Microsoft.Build.Utilities.ProjectCreation.PackageRepository!
Microsoft.Build.Utilities.ProjectCreation.PackageRepository.Package(System.IO.FileInfo! nupkg, out Microsoft.Build.Utilities.ProjectCreation.Package! package) -> Microsoft.Build.Utilities.ProjectCreation.PackageRepository!
Microsoft.Build.Utilities.ProjectCreation.PackageRepository.Packages.get -> System.Collections.Generic.IReadOnlyCollection<Microsoft.Build.Utilities.ProjectCreation.Package!>!
Microsoft.Build.Utilities.ProjectCreation.ProjectCreator
Microsoft.Build.Utilities.ProjectCreation.ProjectCreator.Choose(string? label = null) -> Microsoft.Build.Utilities.ProjectCreation.ProjectCreator!
Microsoft.Build.Utilities.ProjectCreation.ProjectCreator.CustomAction(System.Action<Microsoft.Build.Utilities.ProjectCreation.ProjectCreator!>? projectCreator) -> Microsoft.Build.Utilities.ProjectCreation.ProjectCreator!
Microsoft.Build.Utilities.ProjectCreation.ProjectCreator.For(int count, System.Action<int, Microsoft.Build.Utilities.ProjectCreation.ProjectCreator!>! action) -> Microsoft.Build.Utilities.ProjectCreation.ProjectCreator!
Microsoft.Build.Utilities.ProjectCreation.ProjectCreator.ForEach<T>(System.Collections.Generic.IEnumerable<T>? source, System.Action<T, Microsoft.Build.Utilities.ProjectCreation.ProjectCreator!>! action) -> Microsoft.Build.Utilities.ProjectCreation.ProjectCreator!
Microsoft.Build.Utilities.ProjectCreation.ProjectCreator.FullPath.get -> string!
Microsoft.Build.Utilities.ProjectCreation.ProjectCreator.Import(Microsoft.Build.Construction.ProjectRootElement! projectRootElement, string? condition = null, bool conditionOnExistence = false, string? label = null) -> Microsoft.Build.Utilities.ProjectCreation.ProjectCreator!
Microsoft.Build.Utilities.ProjectCreation.ProjectCreator.Import(Microsoft.Build.Evaluation.Project! project, string? condition = null, bool conditionOnExistence = false, string? label = null) -> Microsoft.Build.Utilities.ProjectCreation.ProjectCreator!
Microsoft.Build.Utilities.ProjectCreation.ProjectCreator.Import(Microsoft.Build.Utilities.ProjectCreation.ProjectCreator! projectCreator, string? condition = null, bool conditionOnExistence = false, string? label = null) -> Microsoft.Build.Utilities.ProjectCreation.ProjectCreator!
Microsoft.Build.Utilities.ProjectCreation.ProjectCreator.Import(string! project, string? condition = null, string? sdk = null, string? sdkVersion = null, bool conditionOnExistence = false, string? label = null) -> Microsoft.Build.Utilities.ProjectCreation.ProjectCreator!
Microsoft.Build.Utilities.ProjectCreation.ProjectCreator.ImportSdk(string! project, string! name, string? version = null, string? condition = null, string? label = null) -> Microsoft.Build.Utilities.ProjectCreation.ProjectCreator!
Microsoft.Build.Utilities.ProjectCreation.ProjectCreator.ItemCompile(string! include, string? exclude = null, string? dependentUpon = null, string? link = null, bool? isVisible = null, System.Collections.Generic.IDictionary<string!, string?>? metadata = null, string? condition = null, string? label = null) -> Microsoft.Build.Utilities.ProjectCreation.ProjectCreator!
Microsoft.Build.Utilities.ProjectCreation.ProjectCreator.ItemContent(string! include, string? exclude = null, string? dependentUpon = null, string? link = null, bool? isVisible = null, string? copyToOutputDirectory = null, System.Collections.Generic.IDictionary<string!, string?>? metadata = null, string? condition = null, string? label = null) -> Microsoft.Build.Utilities.ProjectCreation.ProjectCreator!
Microsoft.Build.Utilities.ProjectCreation.ProjectCreator.ItemGroup(string? condition = null, string? label = null) -> Microsoft.Build.Utilities.ProjectCreation.ProjectCreator!
Microsoft.Build.Utilities.ProjectCreation.ProjectCreator.ItemInclude(string! itemType, string? include, string? exclude = null, System.Collections.Generic.IDictionary<string!, string?>? metadata = null, string? condition = null, string? label = null) -> Microsoft.Build.Utilities.ProjectCreation.ProjectCreator!
Microsoft.Build.Utilities.ProjectCreation.ProjectCreator.ItemNone(string! include, string? exclude = null, string? dependentUpon = null, string? link = null, bool? isVisible = null, string? copyToOutputDirectory = null, System.Collections.Generic.IDictionary<string!, string?>? metadata = null, string? condition = null, string? label = null) -> Microsoft.Build.Utilities.ProjectCreation.ProjectCreator!
Microsoft.Build.Utilities.ProjectCreation.ProjectCreator.ItemPackageReference(Microsoft.Build.Utilities.ProjectCreation.Package! package, string? includeAssets = null, string? excludeAssets = null, string? privateAssets = null, System.Collections.Generic.IDictionary<string!, string?>? metadata = null, string? condition = null, string? label = null) -> Microsoft.Build.Utilities.ProjectCreation.ProjectCreator!
Microsoft.Build.Utilities.ProjectCreation.ProjectCreator.ItemPackageReference(string! include, string? version = null, string? includeAssets = null, string? excludeAssets = null, string? privateAssets = null, System.Collections.Generic.IDictionary<string!, string?>? metadata = null, string? condition = null, string? label = null) -> Microsoft.Build.Utilities.ProjectCreation.ProjectCreator!
Microsoft.Build.Utilities.ProjectCreation.ProjectCreator.ItemProjectReference(Microsoft.Build.Construction.ProjectRootElement! rootElement, string? name = null, string? projectGuid = null, bool? referenceOutputAssembly = null, System.Collections.Generic.IDictionary<string!, string?>? metadata = null, string? condition = null, string? label = null) -> Microsoft.Build.Utilities.ProjectCreation.ProjectCreator!
Microsoft.Build.Utilities.ProjectCreation.ProjectCreator.ItemProjectReference(Microsoft.Build.Evaluation.Project! project, string? name = null, string? projectGuid = null, bool? referenceOutputAssembly = null, System.Collections.Generic.IDictionary<string!, string?>? metadata = null, string? condition = null, string? label = null) -> Microsoft.Build.Utilities.ProjectCreation.ProjectCreator!
Microsoft.Build.Utilities.ProjectCreation.ProjectCreator.ItemProjectReference(Microsoft.Build.Utilities.ProjectCreation.ProjectCreator! projectCreator, string? name = null, string? projectGuid = null, bool? referenceOutputAssembly = null, System.Collections.Generic.IDictionary<string!, string?>? metadata = null, string? condition = null, string? label = null) -> Microsoft.Build.Utilities.ProjectCreation.ProjectCreator!
Microsoft.Build.Utilities.ProjectCreation.ProjectCreator.ItemProjectReference(string! include, string? name = null, string? projectGuid = null, bool? referenceOutputAssembly = null, System.Collections.Generic.IDictionary<string!, string?>? metadata = null, string? condition = null, string? label = null) -> Microsoft.Build.Utilities.ProjectCreation.ProjectCreator!
Microsoft.Build.Utilities.ProjectCreation.ProjectCreator.ItemReference(string! include, string? name = null, string? hintPath = null, bool? isSpecificVersion = null, string? aliases = null, bool? isPrivate = null, System.Collections.Generic.IDictionary<string!, string?>? metadata = null, string? condition = null, string? label = null) -> Microsoft.Build.Utilities.ProjectCreation.ProjectCreator!
Microsoft.Build.Utilities.ProjectCreation.ProjectCreator.ItemRemove(string! itemType, string? remove, System.Collections.Generic.IDictionary<string!, string?>? metadata = null, string? condition = null, string? label = null) -> Microsoft.Build.Utilities.ProjectCreation.ProjectCreator!
Microsoft.Build.Utilities.ProjectCreation.ProjectCreator.ItemUpdate(string! itemType, string? update, System.Collections.Generic.IDictionary<string!, string?>? metadata = null, string? condition = null, string? label = null) -> Microsoft.Build.Utilities.ProjectCreation.ProjectCreator!
Microsoft.Build.Utilities.ProjectCreation.ProjectCreator.Otherwise(string? label = null) -> Microsoft.Build.Utilities.ProjectCreation.ProjectCreator!
Microsoft.Build.Utilities.ProjectCreation.ProjectCreator.OtherwiseItemGroup(string? condition = null, string? label = null) -> Microsoft.Build.Utilities.ProjectCreation.ProjectCreator!
Microsoft.Build.Utilities.ProjectCreation.ProjectCreator.OtherwiseItemInclude(string! itemType, string! include, string? exclude = null, System.Collections.Generic.IDictionary<string!, string?>? metadata = null, string? condition = null, string? label = null) -> Microsoft.Build.Utilities.ProjectCreation.ProjectCreator!
Microsoft.Build.Utilities.ProjectCreation.ProjectCreator.OtherwiseProperty(string! name, string! unevaluatedValue, string? condition = null, bool setIfEmpty = false, string? label = null) -> Microsoft.Build.Utilities.ProjectCreation.ProjectCreator!
Microsoft.Build.Utilities.ProjectCreation.ProjectCreator.OtherwisePropertyGroup(string? condition = null, string? label = null) -> Microsoft.Build.Utilities.ProjectCreation.ProjectCreator!
Microsoft.Build.Utilities.ProjectCreation.ProjectCreator.Project.get -> Microsoft.Build.Evaluation.Project!
Microsoft.Build.Utilities.ProjectCreation.ProjectCreator.ProjectCollection.get -> Microsoft.Build.Evaluation.ProjectCollection!
Microsoft.Build.Utilities.ProjectCreation.ProjectCreator.ProjectInstance.get -> Microsoft.Build.Execution.ProjectInstance!
Microsoft.Build.Utilities.ProjectCreation.ProjectCreator.Property(string! name, string? unevaluatedValue, string? condition = null, bool setIfEmpty = false, string? label = null) -> Microsoft.Build.Utilities.ProjectCreation.ProjectCreator!
Microsoft.Build.Utilities.ProjectCreation.ProjectCreator.PropertyGroup(string? condition = null, string? label = null) -> Microsoft.Build.Utilities.ProjectCreation.ProjectCreator!
Microsoft.Build.Utilities.ProjectCreation.ProjectCreator.RootElement.get -> Microsoft.Build.Construction.ProjectRootElement!
Microsoft.Build.Utilities.ProjectCreation.ProjectCreator.Save() -> Microsoft.Build.Utilities.ProjectCreation.ProjectCreator!
Microsoft.Build.Utilities.ProjectCreation.ProjectCreator.Save(string! path) -> Microsoft.Build.Utilities.ProjectCreation.ProjectCreator!
Microsoft.Build.Utilities.ProjectCreation.ProjectCreator.Sdk(string! name, string? version = null) -> Microsoft.Build.Utilities.ProjectCreation.ProjectCreator!
Microsoft.Build.Utilities.ProjectCreation.ProjectCreator.Target(string! name, string? condition = null, string? afterTargets = null, string? beforeTargets = null, string? dependsOnTargets = null, string? inputs = null, string? outputs = null, string? returns = null, bool? keepDuplicateOutputs = null, string? label = null) -> Microsoft.Build.Utilities.ProjectCreation.ProjectCreator!
Microsoft.Build.Utilities.ProjectCreation.ProjectCreator.TargetItemGroup(string? condition = null, string? label = null) -> Microsoft.Build.Utilities.ProjectCreation.ProjectCreator!
Microsoft.Build.Utilities.ProjectCreation.ProjectCreator.TargetItemInclude(string! itemType, string! include, string? exclude = null, System.Collections.Generic.IDictionary<string!, string?>? metadata = null, string? condition = null, string? label = null) -> Microsoft.Build.Utilities.ProjectCreation.ProjectCreator!
Microsoft.Build.Utilities.ProjectCreation.ProjectCreator.TargetOnError(string! executeTargets, string? condition = null, string? label = null) -> Microsoft.Build.Utilities.ProjectCreation.ProjectCreator!
Microsoft.Build.Utilities.ProjectCreation.ProjectCreator.TargetProperty(string! name, string! unevaluatedValue, string? condition = null, bool setIfEmpty = false, string? label = null) -> Microsoft.Build.Utilities.ProjectCreation.ProjectCreator!
Microsoft.Build.Utilities.ProjectCreation.ProjectCreator.TargetPropertyGroup(string? condition = null, string? label = null) -> Microsoft.Build.Utilities.ProjectCreation.ProjectCreator!
Microsoft.Build.Utilities.ProjectCreation.ProjectCreator.Task(string! name, string? condition = null, System.Collections.Generic.IDictionary<string!, string?>? parameters = null, string? continueOnError = null, string? architecture = null, string? runtime = null, string? label = null) -> Microsoft.Build.Utilities.ProjectCreation.ProjectCreator!
Microsoft.Build.Utilities.ProjectCreation.ProjectCreator.TaskError(string! text, string? code = null, string? file = null, string? helpKeyword = null, string? condition = null, string? label = null) -> Microsoft.Build.Utilities.ProjectCreation.ProjectCreator!
Microsoft.Build.Utilities.ProjectCreation.ProjectCreator.TaskMessage(string! text, Microsoft.Build.Framework.MessageImportance? importance = null, string? condition = null, string? label = null) -> Microsoft.Build.Utilities.ProjectCreation.ProjectCreator!
Microsoft.Build.Utilities.ProjectCreation.ProjectCreator.TaskOutputItem(string! taskParameter, string! itemType, string? condition = null, string? label = null) -> Microsoft.Build.Utilities.ProjectCreation.ProjectCreator!
Microsoft.Build.Utilities.ProjectCreation.ProjectCreator.TaskOutputProperty(string! taskParameter, string! propertyName, string? condition = null, string? label = null) -> Microsoft.Build.Utilities.ProjectCreation.ProjectCreator!
Microsoft.Build.Utilities.ProjectCreation.ProjectCreator.TaskWarning(string! text, string? code = null, string? file = null, string? helpKeyword = null, string? condition = null, string? label = null) -> Microsoft.Build.Utilities.ProjectCreation.ProjectCreator!
Microsoft.Build.Utilities.ProjectCreation.ProjectCreator.TryBuild(bool restore, out bool result) -> Microsoft.Build.Utilities.ProjectCreation.ProjectCreator!
Microsoft.Build.Utilities.ProjectCreation.ProjectCreator.TryBuild(bool restore, out bool result, out Microsoft.Build.Utilities.ProjectCreation.BuildOutput! buildOutput) -> Microsoft.Build.Utilities.ProjectCreation.ProjectCreator!
Microsoft.Build.Utilities.ProjectCreation.ProjectCreator.TryBuild(bool restore, string! target, out bool result) -> Microsoft.Build.Utilities.ProjectCreation.ProjectCreator!
Microsoft.Build.Utilities.ProjectCreation.ProjectCreator.TryBuild(bool restore, string! target, out bool result, out Microsoft.Build.Utilities.ProjectCreation.BuildOutput! buildOutput) -> Microsoft.Build.Utilities.ProjectCreation.ProjectCreator!
Microsoft.Build.Utilities.ProjectCreation.ProjectCreator.TryBuild(bool restore, string! target, out bool result, out Microsoft.Build.Utilities.ProjectCreation.BuildOutput! buildOutput, out System.Collections.Generic.IDictionary<string!, Microsoft.Build.Execution.TargetResult!>? targetOutputs) -> Microsoft.Build.Utilities.ProjectCreation.ProjectCreator!
Microsoft.Build.Utilities.ProjectCreation.ProjectCreator.TryBuild(bool restore, string! target, System.Collections.Generic.IDictionary<string!, string!>? globalProperties, out bool result) -> Microsoft.Build.Utilities.ProjectCreation.ProjectCreator!
Microsoft.Build.Utilities.ProjectCreation.ProjectCreator.TryBuild(bool restore, string! target, System.Collections.Generic.IDictionary<string!, string!>? globalProperties, out bool result, out Microsoft.Build.Utilities.ProjectCreation.BuildOutput! buildOutput) -> Microsoft.Build.Utilities.ProjectCreation.ProjectCreator!
Microsoft.Build.Utilities.ProjectCreation.ProjectCreator.TryBuild(bool restore, string! target, System.Collections.Generic.IDictionary<string!, string!>? globalProperties, out bool result, out Microsoft.Build.Utilities.ProjectCreation.BuildOutput! buildOutput, out System.Collections.Generic.IDictionary<string!, Microsoft.Build.Execution.TargetResult!>? targetOutputs) -> Microsoft.Build.Utilities.ProjectCreation.ProjectCreator!
Microsoft.Build.Utilities.ProjectCreation.ProjectCreator.TryBuild(bool restore, string![]! targets, out bool result, out Microsoft.Build.Utilities.ProjectCreation.BuildOutput! buildOutput, out System.Collections.Generic.IDictionary<string!, Microsoft.Build.Execution.TargetResult!>? targetOutputs) -> Microsoft.Build.Utilities.ProjectCreation.ProjectCreator!
Microsoft.Build.Utilities.ProjectCreation.ProjectCreator.TryBuild(bool restore, string![]! targets, System.Collections.Generic.IDictionary<string!, string!>? globalProperties, out bool result, out Microsoft.Build.Utilities.ProjectCreation.BuildOutput! buildOutput, out System.Collections.Generic.IDictionary<string!, Microsoft.Build.Execution.TargetResult!>? targetOutputs) -> Microsoft.Build.Utilities.ProjectCreation.ProjectCreator!
Microsoft.Build.Utilities.ProjectCreation.ProjectCreator.TryBuild(bool restore, System.Collections.Generic.IDictionary<string!, string!>? globalProperties, out bool result) -> Microsoft.Build.Utilities.ProjectCreation.ProjectCreator!
Microsoft.Build.Utilities.ProjectCreation.ProjectCreator.TryBuild(bool restore, System.Collections.Generic.IDictionary<string!, string!>? globalProperties, out bool result, out Microsoft.Build.Utilities.ProjectCreation.BuildOutput! buildOutput) -> Microsoft.Build.Utilities.ProjectCreation.ProjectCreator!
Microsoft.Build.Utilities.ProjectCreation.ProjectCreator.TryBuild(bool restore, System.Collections.Generic.IEnumerable<string!>! targets, out bool result, out Microsoft.Build.Utilities.ProjectCreation.BuildOutput! buildOutput, out System.Collections.Generic.IDictionary<string!, Microsoft.Build.Execution.TargetResult!>? targetOutputs) -> Microsoft.Build.Utilities.ProjectCreation.ProjectCreator!
Microsoft.Build.Utilities.ProjectCreation.ProjectCreator.TryBuild(bool restore, System.Collections.Generic.IEnumerable<string!>! targets, System.Collections.Generic.IDictionary<string!, string!>? globalProperties, out bool result, out Microsoft.Build.Utilities.ProjectCreation.BuildOutput! buildOutput, out System.Collections.Generic.IDictionary<string!, Microsoft.Build.Execution.TargetResult!>? targetOutputs) -> Microsoft.Build.Utilities.ProjectCreation.ProjectCreator!
Microsoft.Build.Utilities.ProjectCreation.ProjectCreator.TryBuild(out bool result) -> Microsoft.Build.Utilities.ProjectCreation.ProjectCreator!
Microsoft.Build.Utilities.ProjectCreation.ProjectCreator.TryBuild(out bool result, out Microsoft.Build.Utilities.ProjectCreation.BuildOutput! buildOutput) -> Microsoft.Build.Utilities.ProjectCreation.ProjectCreator!
Microsoft.Build.Utilities.ProjectCreation.ProjectCreator.TryBuild(string! target, out bool result) -> Microsoft.Build.Utilities.ProjectCreation.ProjectCreator!
Microsoft.Build.Utilities.ProjectCreation.ProjectCreator.TryBuild(string! target, out bool result, out Microsoft.Build.Utilities.ProjectCreation.BuildOutput! buildOutput) -> Microsoft.Build.Utilities.ProjectCreation.ProjectCreator!
Microsoft.Build.Utilities.ProjectCreation.ProjectCreator.TryBuild(string! target, out bool result, out Microsoft.Build.Utilities.ProjectCreation.BuildOutput! buildOutput, out System.Collections.Generic.IDictionary<string!, Microsoft.Build.Execution.TargetResult!>? targetOutputs) -> Microsoft.Build.Utilities.ProjectCreation.ProjectCreator!
Microsoft.Build.Utilities.ProjectCreation.ProjectCreator.TryBuild(string! target, System.Collections.Generic.IDictionary<string!, string!>? globalProperties, out bool result) -> Microsoft.Build.Utilities.ProjectCreation.ProjectCreator!
Microsoft.Build.Utilities.ProjectCreation.ProjectCreator.TryBuild(string! target, System.Collections.Generic.IDictionary<string!, string!>? globalProperties, out bool result, out Microsoft.Build.Utilities.ProjectCreation.BuildOutput! buildOutput) -> Microsoft.Build.Utilities.ProjectCreation.ProjectCreator!
Microsoft.Build.Utilities.ProjectCreation.ProjectCreator.TryBuild(string! target, System.Collections.Generic.IDictionary<string!, string!>? globalProperties, out bool result, out Microsoft.Build.Utilities.ProjectCreation.BuildOutput! buildOutput, out System.Collections.Generic.IDictionary<string!, Microsoft.Build.Execution.TargetResult!>? targetOutputs) -> Microsoft.Build.Utilities.ProjectCreation.ProjectCreator!
Microsoft.Build.Utilities.ProjectCreation.ProjectCreator.TryBuild(string![]! targets, out bool result, out Microsoft.Build.Utilities.ProjectCreation.BuildOutput! buildOutput, out System.Collections.Generic.IDictionary<string!, Microsoft.Build.Execution.TargetResult!>? targetOutputs) -> Microsoft.Build.Utilities.ProjectCreation.ProjectCreator!
Microsoft.Build.Utilities.ProjectCreation.ProjectCreator.TryBuild(string![]! targets, System.Collections.Generic.IDictionary<string!, string!>? globalProperties, out bool result, out Microsoft.Build.Utilities.ProjectCreation.BuildOutput! buildOutput, out System.Collections.Generic.IDictionary<string!, Microsoft.Build.Execution.TargetResult!>? targetOutputs) -> Microsoft.Build.Utilities.ProjectCreation.ProjectCreator!
Microsoft.Build.Utilities.ProjectCreation.ProjectCreator.TryBuild(System.Collections.Generic.Dictionary<string!, string!>? globalProperties, out bool result) -> Microsoft.Build.Utilities.ProjectCreation.ProjectCreator!
Microsoft.Build.Utilities.ProjectCreation.ProjectCreator.TryBuild(System.Collections.Generic.IDictionary<string!, string!>? globalProperties, out bool result, out Microsoft.Build.Utilities.ProjectCreation.BuildOutput! buildOutput) -> Microsoft.Build.Utilities.ProjectCreation.ProjectCreator!
Microsoft.Build.Utilities.ProjectCreation.ProjectCreator.TryBuild(System.Collections.Generic.IEnumerable<string!>! targets, out bool result, out Microsoft.Build.Utilities.ProjectCreation.BuildOutput! buildOutput, out System.Collections.Generic.IDictionary<string!, Microsoft.Build.Execution.TargetResult!>? targetOutputs) -> Microsoft.Build.Utilities.ProjectCreation.ProjectCreator!
Microsoft.Build.Utilities.ProjectCreation.ProjectCreator.TryBuild(System.Collections.Generic.IEnumerable<string!>! targets, System.Collections.Generic.IDictionary<string!, string!>? globalProperties, out bool result, out Microsoft.Build.Utilities.ProjectCreation.BuildOutput! buildOutput, out System.Collections.Generic.IDictionary<string!, Microsoft.Build.Execution.TargetResult!>? targetOutputs) -> Microsoft.Build.Utilities.ProjectCreation.ProjectCreator!
Microsoft.Build.Utilities.ProjectCreation.ProjectCreator.TryGetItems(string! itemType, out System.Collections.Generic.IReadOnlyCollection<Microsoft.Build.Evaluation.ProjectItem!>! items) -> Microsoft.Build.Utilities.ProjectCreation.ProjectCreator!
Microsoft.Build.Utilities.ProjectCreation.ProjectCreator.TryGetItems(string! itemType, string! metadataName, out System.Collections.Generic.IReadOnlyDictionary<string!, string!>! items) -> Microsoft.Build.Utilities.ProjectCreation.ProjectCreator!
Microsoft.Build.Utilities.ProjectCreation.ProjectCreator.TryGetItems<T>(string! itemType, System.Func<Microsoft.Build.Evaluation.ProjectItem!, T>! selector, out System.Collections.Generic.IReadOnlyCollection<T>! items) -> Microsoft.Build.Utilities.ProjectCreation.ProjectCreator!
Microsoft.Build.Utilities.ProjectCreation.ProjectCreator.TryGetProject(out Microsoft.Build.Evaluation.Project! project, out Microsoft.Build.Utilities.ProjectCreation.BuildOutput! buildOutput, System.Collections.Generic.IDictionary<string!, string!>? globalProperties = null, string? toolsVersion = null, Microsoft.Build.Evaluation.ProjectCollection? projectCollection = null, Microsoft.Build.Evaluation.ProjectLoadSettings projectLoadSettings = Microsoft.Build.Evaluation.ProjectLoadSettings.Default) -> Microsoft.Build.Utilities.ProjectCreation.ProjectCreator!
Microsoft.Build.Utilities.ProjectCreation.ProjectCreator.TryGetProject(out Microsoft.Build.Evaluation.Project! project, System.Collections.Generic.IDictionary<string!, string!>? globalProperties = null, string? toolsVersion = null, Microsoft.Build.Evaluation.ProjectCollection? projectCollection = null, Microsoft.Build.Evaluation.ProjectLoadSettings projectLoadSettings = Microsoft.Build.Evaluation.ProjectLoadSettings.Default) -> Microsoft.Build.Utilities.ProjectCreation.ProjectCreator!
Microsoft.Build.Utilities.ProjectCreation.ProjectCreator.TryGetProjectInstance(out Microsoft.Build.Execution.ProjectInstance! projectInstance, Microsoft.Build.Execution.ProjectInstanceSettings projectInstanceSettings = Microsoft.Build.Execution.ProjectInstanceSettings.None, Microsoft.Build.Evaluation.Context.EvaluationContext? evaluationContext = null) -> Microsoft.Build.Utilities.ProjectCreation.ProjectCreator!
Microsoft.Build.Utilities.ProjectCreation.ProjectCreator.TryGetPropertyValue(string! name, out string! value) -> Microsoft.Build.Utilities.ProjectCreation.ProjectCreator!
Microsoft.Build.Utilities.ProjectCreation.ProjectCreator.TryRestore(out bool result) -> Microsoft.Build.Utilities.ProjectCreation.ProjectCreator!
Microsoft.Build.Utilities.ProjectCreation.ProjectCreator.TryRestore(out bool result, out Microsoft.Build.Utilities.ProjectCreation.BuildOutput! buildOutput) -> Microsoft.Build.Utilities.ProjectCreation.ProjectCreator!
Microsoft.Build.Utilities.ProjectCreation.ProjectCreator.TryRestore(out bool result, out Microsoft.Build.Utilities.ProjectCreation.BuildOutput! buildOutput, out System.Collections.Generic.IDictionary<string!, Microsoft.Build.Execution.TargetResult!>? targetOutputs) -> Microsoft.Build.Utilities.ProjectCreation.ProjectCreator!
Microsoft.Build.Utilities.ProjectCreation.ProjectCreator.TryRestore(System.Collections.Generic.IDictionary<string!, string!>? globalProperties, out bool result) -> Microsoft.Build.Utilities.ProjectCreation.ProjectCreator!
Microsoft.Build.Utilities.ProjectCreation.ProjectCreator.TryRestore(System.Collections.Generic.IDictionary<string!, string!>? globalProperties, out bool result, out Microsoft.Build.Utilities.ProjectCreation.BuildOutput! buildOutput) -> Microsoft.Build.Utilities.ProjectCreation.ProjectCreator!
Microsoft.Build.Utilities.ProjectCreation.ProjectCreator.TryRestore(System.Collections.Generic.IDictionary<string!, string!>? globalProperties, out bool result, out Microsoft.Build.Utilities.ProjectCreation.BuildOutput! buildOutput, out System.Collections.Generic.IDictionary<string!, Microsoft.Build.Execution.TargetResult!>? targetOutputs) -> Microsoft.Build.Utilities.ProjectCreation.ProjectCreator!
Microsoft.Build.Utilities.ProjectCreation.ProjectCreator.UsingTaskAssemblyFile(string! taskName, string! assemblyFile, string? taskFactory = null, string? runtime = null, string? architecture = null, string? condition = null, string? label = null) -> Microsoft.Build.Utilities.ProjectCreation.ProjectCreator!
Microsoft.Build.Utilities.ProjectCreation.ProjectCreator.UsingTaskAssemblyName(string! taskName, string! assemblyName, string! taskFactory, string? runtime = null, string? architecture = null, string? condition = null, string? label = null) -> Microsoft.Build.Utilities.ProjectCreation.ProjectCreator!
Microsoft.Build.Utilities.ProjectCreation.ProjectCreator.UsingTaskBody(string! body, bool? evaluate = null) -> Microsoft.Build.Utilities.ProjectCreation.ProjectCreator!
Microsoft.Build.Utilities.ProjectCreation.ProjectCreator.UsingTaskParameter(string! name, string? parameterType = null, bool? output = null, bool? required = null) -> Microsoft.Build.Utilities.ProjectCreation.ProjectCreator!
Microsoft.Build.Utilities.ProjectCreation.ProjectCreator.When(string? condition = null, string? label = null) -> Microsoft.Build.Utilities.ProjectCreation.ProjectCreator!
Microsoft.Build.Utilities.ProjectCreation.ProjectCreator.WhenItemGroup(string? condition = null, string? label = null) -> Microsoft.Build.Utilities.ProjectCreation.ProjectCreator!
Microsoft.Build.Utilities.ProjectCreation.ProjectCreator.WhenItemInclude(string! itemType, string! include, string? exclude = null, System.Collections.Generic.IDictionary<string!, string?>? metadata = null, string? condition = null, string? label = null) -> Microsoft.Build.Utilities.ProjectCreation.ProjectCreator!
Microsoft.Build.Utilities.ProjectCreation.ProjectCreator.WhenProperty(string! name, string! unevaluatedValue, string? condition = null, bool setIfEmpty = false, string? label = null) -> Microsoft.Build.Utilities.ProjectCreation.ProjectCreator!
Microsoft.Build.Utilities.ProjectCreation.ProjectCreator.WhenPropertyGroup(string? condition = null, string? label = null) -> Microsoft.Build.Utilities.ProjectCreation.ProjectCreator!
Microsoft.Build.Utilities.ProjectCreation.ProjectCreator.Xml.get -> string!
Microsoft.Build.Utilities.ProjectCreation.ProjectCreatorConstants
Microsoft.Build.Utilities.ProjectCreation.ProjectCreatorException
Microsoft.Build.Utilities.ProjectCreation.ProjectCreatorException.ProjectCreatorException(string! message) -> void
Microsoft.Build.Utilities.ProjectCreation.ProjectCreatorException.ProjectCreatorException(string! message, System.Exception! innerException) -> void
Microsoft.Build.Utilities.ProjectCreation.ProjectCreatorTemplates
Microsoft.Build.Utilities.ProjectCreation.ProjectCreatorTemplates.LegacyCsproj(string? path = null, string! outputType = "Library", string! targetFrameworkVersion = "v4.6", string! rootNamespace = "ClassLibrary", string! assemblyName = "ClassLibrary", string! defaultConfiguration = "Debug", string! defaultPlatform = "AnyCPU", string? projectGuid = null, string! fileAlignment = "512", System.Action<Microsoft.Build.Utilities.ProjectCreation.ProjectCreator!>? projectCreator = null, string! defaultTargets = "Build", string? initialTargets = null, string? toolsVersion = null, string? treatAsLocalProperty = null, Microsoft.Build.Evaluation.ProjectCollection? projectCollection = null, Microsoft.Build.Evaluation.NewProjectFileOptions? projectFileOptions = (Microsoft.Build.Evaluation.NewProjectFileOptions)-1, System.Collections.Generic.IDictionary<string!, string!>? globalProperties = null) -> Microsoft.Build.Utilities.ProjectCreation.ProjectCreator!
Microsoft.Build.Utilities.ProjectCreation.ProjectCreatorTemplates.LogsMessage(string! text, Microsoft.Build.Framework.MessageImportance? importance = null, string? condition = null, string? targetName = null, string? path = null, string? defaultTargets = null, string? initialTargets = null, string? sdk = null, string? toolsVersion = null, string? treatAsLocalProperty = null, Microsoft.Build.Evaluation.ProjectCollection? projectCollection = null, Microsoft.Build.Evaluation.NewProjectFileOptions? projectFileOptions = null) -> Microsoft.Build.Utilities.ProjectCreation.ProjectCreator!
Microsoft.Build.Utilities.ProjectCreation.ProjectCreatorTemplates.ProjectCreatorTemplates() -> void
Microsoft.Build.Utilities.ProjectCreation.ProjectCreatorTemplates.SdkCsproj(string? path = null, string! sdk = "Microsoft.NET.Sdk", string? targetFramework = "netstandard2.0", string? outputType = null, System.Action<Microsoft.Build.Utilities.ProjectCreation.ProjectCreator!>? projectCreator = null, string? defaultTargets = null, string? initialTargets = null, string? treatAsLocalProperty = null, Microsoft.Build.Evaluation.ProjectCollection? projectCollection = null, Microsoft.Build.Evaluation.NewProjectFileOptions? projectFileOptions = Microsoft.Build.Evaluation.NewProjectFileOptions.None, System.Collections.Generic.IDictionary<string!, string!>? globalProperties = null) -> Microsoft.Build.Utilities.ProjectCreation.ProjectCreator!
Microsoft.Build.Utilities.ProjectCreation.ProjectCreatorTemplates.SdkCsproj(System.Collections.Generic.IEnumerable<string!>? targetFrameworks, string? path = null, string! sdk = "Microsoft.NET.Sdk", string? outputType = null, System.Action<Microsoft.Build.Utilities.ProjectCreation.ProjectCreator!>? projectCreator = null, string? defaultTargets = null, string? initialTargets = null, string? treatAsLocalProperty = null, Microsoft.Build.Evaluation.ProjectCollection? projectCollection = null, Microsoft.Build.Evaluation.NewProjectFileOptions? projectFileOptions = Microsoft.Build.Evaluation.NewProjectFileOptions.None, System.Collections.Generic.IDictionary<string!, string!>? globalProperties = null) -> Microsoft.Build.Utilities.ProjectCreation.ProjectCreator!
override Microsoft.Build.Utilities.ProjectCreation.BuildOutput.Dispose() -> void
override Microsoft.Build.Utilities.ProjectCreation.PackageDependency.ToString() -> string!
static Microsoft.Build.Utilities.ProjectCreation.BuildEngine.Create() -> Microsoft.Build.Utilities.ProjectCreation.BuildEngine!
static Microsoft.Build.Utilities.ProjectCreation.BuildOutput.Create() -> Microsoft.Build.Utilities.ProjectCreation.BuildOutput!
static Microsoft.Build.Utilities.ProjectCreation.ExtensionMethods.AsEnumerable<T>(this T? item) -> System.Collections.Generic.IEnumerable<T!>!
static Microsoft.Build.Utilities.ProjectCreation.ExtensionMethods.Merge(this System.Collections.Generic.IDictionary<string!, string?>? first, System.Collections.Generic.IDictionary<string!, string?>! second) -> System.Collections.Generic.IDictionary<string!, string?>!
static Microsoft.Build.Utilities.ProjectCreation.ExtensionMethods.Merge(this System.Collections.Generic.IDictionary<string!, string?>? first, System.Collections.Generic.IDictionary<string!, string?>! second, System.Collections.Generic.IEqualityComparer<string!>! comparer) -> System.Collections.Generic.IDictionary<string!, string?>!
static Microsoft.Build.Utilities.ProjectCreation.ExtensionMethods.ToArrayWithSingleElement<T>(this T! item) -> T![]!
static Microsoft.Build.Utilities.ProjectCreation.MSBuildAssemblyResolver.AssemblyResolve(System.Runtime.Loader.AssemblyLoadContext! assemblyLoadContext, System.Reflection.AssemblyName! requestedAssemblyName) -> System.Reflection.Assembly?
static Microsoft.Build.Utilities.ProjectCreation.MSBuildAssemblyResolver.DotNetSdksPath.get -> string?
static Microsoft.Build.Utilities.ProjectCreation.MSBuildAssemblyResolver.MSBuildExePath.get -> string?
static Microsoft.Build.Utilities.ProjectCreation.MSBuildAssemblyResolver.Register() -> void
static Microsoft.Build.Utilities.ProjectCreation.MSBuildAssemblyResolver.SearchPaths.get -> string![]?
static Microsoft.Build.Utilities.ProjectCreation.PackageFeed.Create(string! rootPath) -> Microsoft.Build.Utilities.ProjectCreation.PackageFeed!
static Microsoft.Build.Utilities.ProjectCreation.PackageFeed.Create(System.IO.DirectoryInfo! rootPath) -> Microsoft.Build.Utilities.ProjectCreation.PackageFeed!
static Microsoft.Build.Utilities.ProjectCreation.PackageFeed.implicit operator System.Uri!(Microsoft.Build.Utilities.ProjectCreation.PackageFeed! packageFeed) -> System.Uri!
static Microsoft.Build.Utilities.ProjectCreation.PackageFeed.Templates.get -> Microsoft.Build.Utilities.ProjectCreation.PackageFeedTemplates!
static Microsoft.Build.Utilities.ProjectCreation.PackageRepository.Create(string! rootPath, params System.Uri![]! feeds) -> Microsoft.Build.Utilities.ProjectCreation.PackageRepository!
static Microsoft.Build.Utilities.ProjectCreation.ProjectCreator.Create(string? path = null, string? defaultTargets = null, string? initialTargets = null, string? sdk = null, string? toolsVersion = null, string? treatAsLocalProperty = null, Microsoft.Build.Evaluation.ProjectCollection? projectCollection = null, Microsoft.Build.Evaluation.NewProjectFileOptions? projectFileOptions = null, System.Collections.Generic.IDictionary<string!, string!>? globalProperties = null) -> Microsoft.Build.Utilities.ProjectCreation.ProjectCreator!
static Microsoft.Build.Utilities.ProjectCreation.ProjectCreator.implicit operator Microsoft.Build.Construction.ProjectRootElement!(Microsoft.Build.Utilities.ProjectCreation.ProjectCreator! creator) -> Microsoft.Build.Construction.ProjectRootElement!
static Microsoft.Build.Utilities.ProjectCreation.ProjectCreator.implicit operator Microsoft.Build.Evaluation.Project!(Microsoft.Build.Utilities.ProjectCreation.ProjectCreator! creator) -> Microsoft.Build.Evaluation.Project!
static Microsoft.Build.Utilities.ProjectCreation.ProjectCreator.implicit operator Microsoft.Build.Evaluation.ProjectCollection!(Microsoft.Build.Utilities.ProjectCreation.ProjectCreator! creator) -> Microsoft.Build.Evaluation.ProjectCollection!
static Microsoft.Build.Utilities.ProjectCreation.ProjectCreator.implicit operator Microsoft.Build.Execution.ProjectInstance!(Microsoft.Build.Utilities.ProjectCreation.ProjectCreator! creator) -> Microsoft.Build.Execution.ProjectInstance!
static Microsoft.Build.Utilities.ProjectCreation.ProjectCreator.implicit operator string!(Microsoft.Build.Utilities.ProjectCreation.ProjectCreator! creator) -> string!
static Microsoft.Build.Utilities.ProjectCreation.ProjectCreator.implicit operator System.Xml.Linq.XDocument!(Microsoft.Build.Utilities.ProjectCreation.ProjectCreator! creator) -> System.Xml.Linq.XDocument!
static Microsoft.Build.Utilities.ProjectCreation.ProjectCreator.Templates.get -> Microsoft.Build.Utilities.ProjectCreation.ProjectCreatorTemplates!
virtual Microsoft.Build.Utilities.ProjectCreation.BuildEventArgsCollection.Dispose() -> void
