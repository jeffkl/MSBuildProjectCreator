#nullable enable
Microsoft.Build.Utilities.ProjectCreation.SolutionCreator
Microsoft.Build.Utilities.ProjectCreation.SolutionCreator.Configuration(string! configuration) -> Microsoft.Build.Utilities.ProjectCreation.SolutionCreator!
Microsoft.Build.Utilities.ProjectCreation.SolutionCreator.Folder(string! path) -> Microsoft.Build.Utilities.ProjectCreation.SolutionCreator!
Microsoft.Build.Utilities.ProjectCreation.SolutionCreator.FullPath.get -> string!
Microsoft.Build.Utilities.ProjectCreation.SolutionCreator.Platform(string! platform) -> Microsoft.Build.Utilities.ProjectCreation.SolutionCreator!
Microsoft.Build.Utilities.ProjectCreation.SolutionCreator.Project(Microsoft.Build.Utilities.ProjectCreation.ProjectCreator! project, Microsoft.VisualStudio.SolutionPersistence.Model.SolutionFolderModel? folder, string? projectTypeName = null) -> Microsoft.Build.Utilities.ProjectCreation.SolutionCreator!
Microsoft.Build.Utilities.ProjectCreation.SolutionCreator.Project(Microsoft.Build.Utilities.ProjectCreation.ProjectCreator! project, string? projectTypeName = null) -> Microsoft.Build.Utilities.ProjectCreation.SolutionCreator!
Microsoft.Build.Utilities.ProjectCreation.SolutionCreator.Project(params Microsoft.Build.Utilities.ProjectCreation.ProjectCreator![]! projects) -> Microsoft.Build.Utilities.ProjectCreation.SolutionCreator!
Microsoft.Build.Utilities.ProjectCreation.SolutionCreator.ProjectCollection.get -> Microsoft.Build.Evaluation.ProjectCollection!
Microsoft.Build.Utilities.ProjectCreation.SolutionCreator.Save() -> Microsoft.Build.Utilities.ProjectCreation.SolutionCreator!
Microsoft.Build.Utilities.ProjectCreation.SolutionCreator.TryBuild(bool restore, out bool result) -> Microsoft.Build.Utilities.ProjectCreation.SolutionCreator!
Microsoft.Build.Utilities.ProjectCreation.SolutionCreator.TryBuild(bool restore, out bool result, out Microsoft.Build.Utilities.ProjectCreation.BuildOutput! buildOutput) -> Microsoft.Build.Utilities.ProjectCreation.SolutionCreator!
Microsoft.Build.Utilities.ProjectCreation.SolutionCreator.TryBuild(bool restore, string! target, out bool result) -> Microsoft.Build.Utilities.ProjectCreation.SolutionCreator!
Microsoft.Build.Utilities.ProjectCreation.SolutionCreator.TryBuild(bool restore, string! target, out bool result, out Microsoft.Build.Utilities.ProjectCreation.BuildOutput! buildOutput) -> Microsoft.Build.Utilities.ProjectCreation.SolutionCreator!
Microsoft.Build.Utilities.ProjectCreation.SolutionCreator.TryBuild(bool restore, string! target, out bool result, out Microsoft.Build.Utilities.ProjectCreation.BuildOutput! buildOutput, out System.Collections.Generic.IDictionary<string!, Microsoft.Build.Execution.TargetResult!>? targetOutputs) -> Microsoft.Build.Utilities.ProjectCreation.SolutionCreator!
Microsoft.Build.Utilities.ProjectCreation.SolutionCreator.TryBuild(bool restore, string! target, System.Collections.Generic.IDictionary<string!, string!>? globalProperties, out bool result) -> Microsoft.Build.Utilities.ProjectCreation.SolutionCreator!
Microsoft.Build.Utilities.ProjectCreation.SolutionCreator.TryBuild(bool restore, string! target, System.Collections.Generic.IDictionary<string!, string!>? globalProperties, out bool result, out Microsoft.Build.Utilities.ProjectCreation.BuildOutput! buildOutput) -> Microsoft.Build.Utilities.ProjectCreation.SolutionCreator!
Microsoft.Build.Utilities.ProjectCreation.SolutionCreator.TryBuild(bool restore, string! target, System.Collections.Generic.IDictionary<string!, string!>? globalProperties, out bool result, out Microsoft.Build.Utilities.ProjectCreation.BuildOutput! buildOutput, out System.Collections.Generic.IDictionary<string!, Microsoft.Build.Execution.TargetResult!>? targetOutputs) -> Microsoft.Build.Utilities.ProjectCreation.SolutionCreator!
Microsoft.Build.Utilities.ProjectCreation.SolutionCreator.TryBuild(bool restore, string![]! targets, out bool result, out Microsoft.Build.Utilities.ProjectCreation.BuildOutput! buildOutput, out System.Collections.Generic.IDictionary<string!, Microsoft.Build.Execution.TargetResult!>? targetOutputs) -> Microsoft.Build.Utilities.ProjectCreation.SolutionCreator!
Microsoft.Build.Utilities.ProjectCreation.SolutionCreator.TryBuild(bool restore, string![]! targets, System.Collections.Generic.IDictionary<string!, string!>? globalProperties, out bool result, out Microsoft.Build.Utilities.ProjectCreation.BuildOutput! buildOutput, out System.Collections.Generic.IDictionary<string!, Microsoft.Build.Execution.TargetResult!>? targetOutputs) -> Microsoft.Build.Utilities.ProjectCreation.SolutionCreator!
Microsoft.Build.Utilities.ProjectCreation.SolutionCreator.TryBuild(bool restore, System.Collections.Generic.IDictionary<string!, string!>? globalProperties, out bool result) -> Microsoft.Build.Utilities.ProjectCreation.SolutionCreator!
Microsoft.Build.Utilities.ProjectCreation.SolutionCreator.TryBuild(bool restore, System.Collections.Generic.IDictionary<string!, string!>? globalProperties, out bool result, out Microsoft.Build.Utilities.ProjectCreation.BuildOutput! buildOutput) -> Microsoft.Build.Utilities.ProjectCreation.SolutionCreator!
Microsoft.Build.Utilities.ProjectCreation.SolutionCreator.TryBuild(bool restore, System.Collections.Generic.IEnumerable<string!>! targets, out bool result, out Microsoft.Build.Utilities.ProjectCreation.BuildOutput! buildOutput, out System.Collections.Generic.IDictionary<string!, Microsoft.Build.Execution.TargetResult!>? targetOutputs) -> Microsoft.Build.Utilities.ProjectCreation.SolutionCreator!
Microsoft.Build.Utilities.ProjectCreation.SolutionCreator.TryBuild(bool restore, System.Collections.Generic.IEnumerable<string!>! targets, System.Collections.Generic.IDictionary<string!, string!>? globalProperties, out bool result, out Microsoft.Build.Utilities.ProjectCreation.BuildOutput! buildOutput, out System.Collections.Generic.IDictionary<string!, Microsoft.Build.Execution.TargetResult!>? targetOutputs) -> Microsoft.Build.Utilities.ProjectCreation.SolutionCreator!
Microsoft.Build.Utilities.ProjectCreation.SolutionCreator.TryBuild(out bool result) -> Microsoft.Build.Utilities.ProjectCreation.SolutionCreator!
Microsoft.Build.Utilities.ProjectCreation.SolutionCreator.TryBuild(out bool result, out Microsoft.Build.Utilities.ProjectCreation.BuildOutput! buildOutput) -> Microsoft.Build.Utilities.ProjectCreation.SolutionCreator!
Microsoft.Build.Utilities.ProjectCreation.SolutionCreator.TryBuild(string! target, out bool result) -> Microsoft.Build.Utilities.ProjectCreation.SolutionCreator!
Microsoft.Build.Utilities.ProjectCreation.SolutionCreator.TryBuild(string! target, out bool result, out Microsoft.Build.Utilities.ProjectCreation.BuildOutput! buildOutput) -> Microsoft.Build.Utilities.ProjectCreation.SolutionCreator!
Microsoft.Build.Utilities.ProjectCreation.SolutionCreator.TryBuild(string! target, out bool result, out Microsoft.Build.Utilities.ProjectCreation.BuildOutput! buildOutput, out System.Collections.Generic.IDictionary<string!, Microsoft.Build.Execution.TargetResult!>? targetOutputs) -> Microsoft.Build.Utilities.ProjectCreation.SolutionCreator!
Microsoft.Build.Utilities.ProjectCreation.SolutionCreator.TryBuild(string! target, System.Collections.Generic.IDictionary<string!, string!>? globalProperties, out bool result) -> Microsoft.Build.Utilities.ProjectCreation.SolutionCreator!
Microsoft.Build.Utilities.ProjectCreation.SolutionCreator.TryBuild(string! target, System.Collections.Generic.IDictionary<string!, string!>? globalProperties, out bool result, out Microsoft.Build.Utilities.ProjectCreation.BuildOutput! buildOutput) -> Microsoft.Build.Utilities.ProjectCreation.SolutionCreator!
Microsoft.Build.Utilities.ProjectCreation.SolutionCreator.TryBuild(string! target, System.Collections.Generic.IDictionary<string!, string!>? globalProperties, out bool result, out Microsoft.Build.Utilities.ProjectCreation.BuildOutput! buildOutput, out System.Collections.Generic.IDictionary<string!, Microsoft.Build.Execution.TargetResult!>? targetOutputs) -> Microsoft.Build.Utilities.ProjectCreation.SolutionCreator!
Microsoft.Build.Utilities.ProjectCreation.SolutionCreator.TryBuild(string![]! targets, out bool result, out Microsoft.Build.Utilities.ProjectCreation.BuildOutput! buildOutput, out System.Collections.Generic.IDictionary<string!, Microsoft.Build.Execution.TargetResult!>? targetOutputs) -> Microsoft.Build.Utilities.ProjectCreation.SolutionCreator!
Microsoft.Build.Utilities.ProjectCreation.SolutionCreator.TryBuild(string![]! targets, System.Collections.Generic.IDictionary<string!, string!>? globalProperties, out bool result, out Microsoft.Build.Utilities.ProjectCreation.BuildOutput! buildOutput, out System.Collections.Generic.IDictionary<string!, Microsoft.Build.Execution.TargetResult!>? targetOutputs) -> Microsoft.Build.Utilities.ProjectCreation.SolutionCreator!
Microsoft.Build.Utilities.ProjectCreation.SolutionCreator.TryBuild(System.Collections.Generic.Dictionary<string!, string!>? globalProperties, out bool result) -> Microsoft.Build.Utilities.ProjectCreation.SolutionCreator!
Microsoft.Build.Utilities.ProjectCreation.SolutionCreator.TryBuild(System.Collections.Generic.IDictionary<string!, string!>? globalProperties, out bool result, out Microsoft.Build.Utilities.ProjectCreation.BuildOutput! buildOutput) -> Microsoft.Build.Utilities.ProjectCreation.SolutionCreator!
Microsoft.Build.Utilities.ProjectCreation.SolutionCreator.TryBuild(System.Collections.Generic.IEnumerable<string!>! targets, out bool result, out Microsoft.Build.Utilities.ProjectCreation.BuildOutput! buildOutput, out System.Collections.Generic.IDictionary<string!, Microsoft.Build.Execution.TargetResult!>? targetOutputs) -> Microsoft.Build.Utilities.ProjectCreation.SolutionCreator!
Microsoft.Build.Utilities.ProjectCreation.SolutionCreator.TryBuild(System.Collections.Generic.IEnumerable<string!>! targets, System.Collections.Generic.IDictionary<string!, string!>? globalProperties, out bool result, out Microsoft.Build.Utilities.ProjectCreation.BuildOutput! buildOutput, out System.Collections.Generic.IDictionary<string!, Microsoft.Build.Execution.TargetResult!>? targetOutputs) -> Microsoft.Build.Utilities.ProjectCreation.SolutionCreator!
Microsoft.Build.Utilities.ProjectCreation.SolutionCreator.TryProject(Microsoft.Build.Utilities.ProjectCreation.ProjectCreator! project, Microsoft.VisualStudio.SolutionPersistence.Model.SolutionFolderModel? folder, out Microsoft.VisualStudio.SolutionPersistence.Model.SolutionProjectModel! projectInSolution, string? projectTypeName = null) -> Microsoft.Build.Utilities.ProjectCreation.SolutionCreator!
Microsoft.Build.Utilities.ProjectCreation.SolutionCreator.TryProject(Microsoft.Build.Utilities.ProjectCreation.ProjectCreator! project, out Microsoft.VisualStudio.SolutionPersistence.Model.SolutionProjectModel! projectInSolution, string? projectTypeName = null) -> Microsoft.Build.Utilities.ProjectCreation.SolutionCreator!
Microsoft.Build.Utilities.ProjectCreation.SolutionCreator.TryRestore(out bool result) -> Microsoft.Build.Utilities.ProjectCreation.SolutionCreator!
Microsoft.Build.Utilities.ProjectCreation.SolutionCreator.TryRestore(out bool result, out Microsoft.Build.Utilities.ProjectCreation.BuildOutput! buildOutput) -> Microsoft.Build.Utilities.ProjectCreation.SolutionCreator!
Microsoft.Build.Utilities.ProjectCreation.SolutionCreator.TryRestore(out bool result, out Microsoft.Build.Utilities.ProjectCreation.BuildOutput! buildOutput, out System.Collections.Generic.IDictionary<string!, Microsoft.Build.Execution.TargetResult!>? targetOutputs) -> Microsoft.Build.Utilities.ProjectCreation.SolutionCreator!
Microsoft.Build.Utilities.ProjectCreation.SolutionCreator.TryRestore(System.Collections.Generic.IDictionary<string!, string!>? globalProperties, out bool result) -> Microsoft.Build.Utilities.ProjectCreation.SolutionCreator!
Microsoft.Build.Utilities.ProjectCreation.SolutionCreator.TryRestore(System.Collections.Generic.IDictionary<string!, string!>? globalProperties, out bool result, out Microsoft.Build.Utilities.ProjectCreation.BuildOutput! buildOutput) -> Microsoft.Build.Utilities.ProjectCreation.SolutionCreator!
Microsoft.Build.Utilities.ProjectCreation.SolutionCreator.TryRestore(System.Collections.Generic.IDictionary<string!, string!>? globalProperties, out bool result, out Microsoft.Build.Utilities.ProjectCreation.BuildOutput! buildOutput, out System.Collections.Generic.IDictionary<string!, Microsoft.Build.Execution.TargetResult!>? targetOutputs) -> Microsoft.Build.Utilities.ProjectCreation.SolutionCreator!
Microsoft.Build.Utilities.ProjectCreation.SolutionCreatorTemplates
Microsoft.Build.Utilities.ProjectCreation.SolutionCreatorTemplates.DotNet(string! path) -> Microsoft.Build.Utilities.ProjectCreation.SolutionCreator!
Microsoft.Build.Utilities.ProjectCreation.SolutionCreatorTemplates.SolutionCreatorTemplates() -> void
static Microsoft.Build.Utilities.ProjectCreation.SolutionCreator.Create(string! path, Microsoft.Build.Evaluation.ProjectCollection? projectCollection = null, System.Collections.Generic.IDictionary<string!, string!>? globalProperties = null) -> Microsoft.Build.Utilities.ProjectCreation.SolutionCreator!
static Microsoft.Build.Utilities.ProjectCreation.SolutionCreator.Templates.get -> Microsoft.Build.Utilities.ProjectCreation.SolutionCreatorTemplates!
